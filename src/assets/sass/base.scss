@import "mesvariables";

h1:hover,h2:hover,h3:hover,p:hover,span:hover{
  cursor: none;
}

html,#app{
  background-color: $color-black;
  overflow-x: hidden;
}

.menu{
  background-color: $color-black;
  z-index: 10;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;


  &::before, &::after {
    box-sizing: border-box;
  }
}


h1, h2{
  font-family: $font-title;

}



h2{
  font-size: 2.5rem;
  color: $color-texte
}

p, a, span{
  font-family: $font-texte;
  color: $color-texte
}

#app > div.Accueil > div:nth-child(2) > div{
  background: rgba(0,0,0,0.5);
  padding-left: 5%;
}

#app > div.Accueil > div:nth-child(2) > div > div > p{
  padding-right: 5%;
}

#app > div.Accueil > div:nth-child(2) > div{
  left: -5%;
}

#app > div.Accueil > div:nth-child(1){
  z-index: 12;
}


#app > div > div.container{
  height: 100vh;
}



@media (min-width: 320px) and (max-width: 768px){
  .g-cursor{
    display: none;
  }
}








// background anime



body {
  margin: 0;

  width: 100vw;
  position: relative;
  overflow-x: hidden;
}

//Radial gradient to fade edges of viewport
.overlay {
  width: 100vw;
  height: 100vh;
  position: absolute;
  z-index: 2;

}

//Container to provide grid layout for all items
#app > div > div.container {
  display: grid;

  grid-template-columns: repeat($cols, $shapeWidth+px);
  grid-template-rows: repeat($rows, $shapeHeight+px);
  transform: translate(-3%, -4%); // Starting point bleeds off edge
}

//Invividual shapes
.shape {
  width: $shapeWidth+px;
  height: $shapeHeight+px;
  //Create hexagon mask
  -webkit-clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);

  //Snap hexagon together by moving each "row" up and over
  @for $i from 1 through $cells {
    @if $i > $cols {
      &:nth-child(#{$i}) {
        transform: translate(-50%, -25%);
      }
    }
    @if $i > ($cols * 2) {
      &:nth-child(#{$i}) {
        transform: translate(0%, -50%);
      }
    }
    @if $i > ($cols * 3) {
      &:nth-child(#{$i}) {
        transform: translate(-50%, -75%);
      }
    }
    @if $i > ($cols * 4) {
      &:nth-child(#{$i}) {
        transform: translate(0%, -100%);
      }
    }
    @if $i > ($cols * 5) {
      &:nth-child(#{$i}) {
        transform: translate(-50%, -125%);
      }
    }
  }
}

//doubleboggey

.Pdoubleboggey{
  background-color: $color-black;
  z-index: 17;
}

//footer
.footer{
  background-color: $color-black;
  border-top: white 1px solid;

}

.footerP{
  background-color: $color-black;
  border-top: white 1px solid;
}





//curseur

.g-cursor {

  &_hide {
    opacity: 1;
    width: 60px;
    transition: width .6s ease,
    height .6s ease,
    opacity .6s ease;
  }

  &__circle {
    pointer-events: none;
    user-select: none;
    top: -0.9%;
    left: -0.4%;
    position: fixed;
    width: 50px;
    height: 50px;
    border: 2px solid #fff;
    border-radius: 100%;
    z-index: 5555;
    backface-visibility: hidden;
    transition: opacity .6s ease;
  }

  &__point {
    top: 0;
    left: 0;
    position: fixed;
    width: 10px;
    height: 10px;
    pointer-events: none;
    user-select: none;
    border-radius: 100%;
    background: #fff;
    z-index: 55555555;
    backface-visibility: hidden;
    will-change: transform;

  }

  &_hover {
    .g-cursor__circle {
      opacity: 1;
      width: 60px;
      height: 60px;
      transition: width .6s ease,
      height .6s ease,
      opacity .6s ease;
    }
  }


}

.fade-enter-active,
.fade-leave-active {
  transition-duration: 0.3s;
  transition-property: opacity;
  transition-timing-function: ease;
}

.fade-enter,
.fade-leave-active {
  opacity: 0
}






